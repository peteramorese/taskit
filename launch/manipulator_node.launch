<?xml version="1.0" ?>
<launch>

  <arg name="sim" default="true" />
  <arg name="advanced" default="false" />
  <arg name="pose_tracker" default="vicon_vrpn" />
  <arg name="pipeline" default="ompl" />
  <arg name="robot_ip" default="franka-aria.colorado.edu" />


  <!-- Launch the vrpn node -->
  <!--include file="$(find vrpn_client_ros)/launch/vicon_franka_vrpn.launch"-->


  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server-->
  <include file="$(find manipulation_interface)/launch/custom_planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="load_gripper" value="true"/>
  </include>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find manipulation_interface)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="$(arg sim)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="pipeline" value="$(arg pipeline)"  />
  </include>

  <include file="$(find manipulation_interface)/launch/load_parameters.launch">
  </include>


  <!-- If in simulation, use the _sim binaries and publish fake joint states -->
  <group if="$(arg sim)">

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node>
    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    <arg unless="$(arg advanced)" name="node_handle" value="basic_manipulator_node_sim" />
    <arg     if="$(arg advanced)" name="node_handle" value="advanced_manipulator_node_sim" />
    <node name="$(arg node_handle)" pkg="manipulation_interface" type="$(arg node_handle)" respawn="false" output="screen">
      <rosparam command="load" file="$(find panda_moveit_config)/config/kinematics.yaml"/>
      <param name="/planning_plugin" value="ompl_interface/OMPLPlanner"/>
      <rosparam command="load" file="$(find panda_moveit_config)/config/ompl_planning.yaml"/>
    </node>
  </group>

  <!-- Otherwise, use the _real binaries and include Franka control -->
  <group unless="$(arg sim)">

    <!-- Contents of the franka_control.launch file, without the default xacro loading-->

    <arg name="load_gripper" value="true" />

    <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
      <arg name="robot_ip" value="$(arg robot_ip)" />
    </include>

    <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
      <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
      <param name="robot_ip" value="$(arg robot_ip)" />
    </node>


    <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="30"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="30"/>
      <remap from="/joint_states" to="/joint_states_desired" />
    </node>

    <!-- <include file="$(find franka_control)/launch/franka_control.launch">
      <arg name="robot_ip" value="$(arg robot_ip)" />
      <arg name="load_gripper" value="true" />
    </include> -->

    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

    <arg unless="$(arg advanced)" name="node_handle" value="basic_manipulator_node_real" />
    <arg     if="$(arg advanced)" name="node_handle" value="advanced_manipulator_node_real" />
    <node name="$(arg node_handle)" pkg="manipulation_interface" type="$(arg node_handle)" respawn="false" output="screen">
      <rosparam command="load" file="$(find panda_moveit_config)/config/kinematics.yaml"/>
      <param name="/planning_plugin" value="ompl_interface/OMPLPlanner"/>
      <rosparam command="load" file="$(find panda_moveit_config)/config/ompl_planning.yaml"/>
    </node>
  </group>

  <!-- Run Rviz -->
  <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch">
    <arg name="debug" value="false"/>
  </include>

</launch>
