<?xml version="1.0" ?>
<launch>
  <arg name="arm_id" default="panda" />

  <arg name="sim" default="true" />
  <arg name="advanced" default="true" />
  <arg name="pose_tracker" default="simulation" />
  <arg name="pose_tracker_sampling_duration" default="0.2" />
  <arg name="use_rviz" default="true" />
  <arg name="use_gui" default="false" />
  <arg name="robot_ip" default="franka-aria.colorado.edu" />

  <arg name="pipeline" default="ompl" />

  <!-- By default we will load the gripper -->
  <arg name="load_gripper" default="true" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake if in sim, or ros_control if connected to Franka -->
  <arg unless="$(arg sim)" name="moveit_controller_manager" value="ros_control" />
  <arg     if="$(arg sim)" name="moveit_controller_manager" value="fake" />

  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />
  <!-- Transmission used for joint control: position, velocity, or effort -->
  <arg name="transmission" />

  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world $(arg arm_id)_link0" />

  <group if="$(eval arg('moveit_controller_manager') == 'fake')">
    <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
         MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>
    <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
         This corresponds to moving around the real robot without the use of MoveIt. -->
    <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
  </group>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find taskit)/launch/move_group.launch" pass_all_args="true">
    <arg name="allow_trajectory_execution" value="true" />
    <arg name="info" value="true" />
  </include>

  <include file="$(find taskit)/launch/load_parameters.launch">
  </include>

  <!-- If pose_tracker is vrpn, launch the vrpn node -->
  <group if="$(eval pose_tracker == 'vrpn')">
    <include file="$(find taskit)/launch/vicon_franka_vrpn.launch"/>
  </group>

  <!-- If in simulation, use the _sim binaries and publish fake joint states -->
  <group if="$(arg sim)">

    <node name="manipulator_node" pkg="taskit" type="manipulator_node_sim" respawn="false" output="screen">
      <rosparam command="load" file="$(find panda_moveit_config)/config/kinematics.yaml"/>
      <param name="/planning_plugin" value="ompl_interface/OMPLPlanner"/>
      <rosparam command="load" file="$(find panda_moveit_config)/config/ompl_planning.yaml"/>
      <param name="pose_tracker/type" value="$(arg pose_tracker)"/>
      <param name="pose_tracker/sampling_duration" value="$(arg pose_tracker_sampling_duration)"/>
    </node>
  </group>

  <!-- Otherwise, use the _real binaries and include Franka control -->
  <group unless="$(arg sim)">

    <!-- Contents of the franka_control.launch file, without the default xacro loading-->

    <!-- <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
      <arg name="robot_ip" value="$(arg robot_ip)" />
    </include>

    <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
      <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
      <param name="robot_ip" value="$(arg robot_ip)" />
    </node>


    <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="30"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="30"/>
      <remap from="/joint_states" to="/joint_states_desired" />
    </node> -->

    <include file="$(find franka_control)/launch/franka_control.launch">
      <arg name="robot_ip" value="$(arg robot_ip)" />
      <arg name="load_gripper" value="$(arg load_gripper)" />
    </include> 

    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

    <node name="manipulator_node" pkg="taskit" type="manipulator_node_real" respawn="false" output="screen">
      <rosparam command="load" file="$(find panda_moveit_config)/config/kinematics.yaml"/>
      <param name="/planning_plugin" value="ompl_interface/OMPLPlanner"/>
      <rosparam command="load" file="$(find panda_moveit_config)/config/ompl_planning.yaml"/>
      <param name="pose_tracker/type" value="$(arg pose_tracker)"/>
      <param name="pose_tracker/sampling_duration" value="$(arg pose_tracker_sampling_duration)"/>
    </node>
  </group>

  <!-- Run Rviz -->
  <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch">
    <arg name="debug" value="false"/>
    <arg name="rviz_config" value="$(dirname)/taskit.rviz" />
  </include>

</launch>
